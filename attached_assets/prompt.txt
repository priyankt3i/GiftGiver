Build a full-stack Secret Santa web application using a monorepo architecture with two main folders:

frontend/: A React + Vite + Tailwind CSS app

backend/: A Node.js + Express (or Fastify) + TypeScript API with a lightweight database (like SQLite or Supabase/PostgreSQL).

The app allows organizers to create events, participants to join using a QR code or URL, and dashboards for both roles to monitor progress and results. After the draw, each participant knows who they are buying a gift for.

🧱 Monorepo Structure
bash
Copy
Edit
secret-santa-monorepo/
│
├── frontend/         # Vite + React + TailwindCSS + TypeScript
│   └── src/
│       └── pages/
│       └── components/
│       └── api/      # Axios client for backend
│       └── hooks/
│       └── utils/
│
├── backend/          # Node.js + Express (or Fastify) + TypeScript
│   └── src/
│       └── routes/
│       └── controllers/
│       └── models/
│       └── db.ts     # SQLite or Supabase/Postgres
│       └── utils/
│
├── package.json
└── README.md
🎯 Core Features
👩‍💼 Organizer Workflow
Create Event

Organizer sets total participants (e.g., 5–100).

Server generates a unique event ID or slug.

Server returns a join URL like:
https://secretsanta.app/join/abc123

A QR code is generated from this URL (frontend).

Dashboard View

Real-time update on who has enrolled.

Can perform “Run Draw” when all participants have joined.

Run Draw

Secret Santa assignment is done on the backend.

Assignments and wishlists are saved and locked.

Each participant is updated with their assigned giftee and wishlist.

🎁 Participant Workflow
Scan QR / Visit Invite URL

Opens /join/:eventId page.

Enroll in Draw

Enters:

Name

3 Wishlist items

Submission sends data to backend and stores session in localStorage.

Redirect to Participant Dashboard

Shows event status:

Waiting for Draw

Draw Completed

You’re Secret Santa for: X, Wishlist: [...]

Dashboard polls or websockets to check event status.

🌐 Backend API (Express or Fastify)
Models:
Event (eventId, organizerId, totalParticipants, status: waiting|drawn)

Participant (name, wishlist[], assignedTo, eventId, createdAt)

Optional: Use UUIDs or short slugs for event/participant IDs.

Key Routes:
h
Copy
Edit
POST   /api/events           → Create new event
GET    /api/events/:id       → Get event details (for dashboard)
POST   /api/events/:id/join  → Join event (participant submits info)
GET    /api/events/:id/users → List participants (for organizer)
POST   /api/events/:id/draw  → Trigger draw and store results
GET    /api/events/:id/me    → Check who this user is assigned to
Auth:
Use simple session token or participant ID stored in localStorage/cookie.

🧑‍🎨 Frontend (React + Vite + Tailwind)
Pages
/create → Organizer creates an event.

/join/:eventId → Participant entry form.

/dashboard/:eventId → Organizer dashboard.

/my/:eventId → Participant dashboard.

Components
QR Code generator (react-qr-code)

Countdown / Status badges

Assignment reveal card

Copy/share link buttons

🔐 Secret Santa Draw Logic (Backend)
ts
Copy
Edit
function assignSecretSantas(participants: Participant[]): Assignment[] {
  const names = participants.map(p => p.name);
  let shuffled = [...names];
  let valid = false;

  while (!valid) {
    shuffled = shuffle(shuffled);
    valid = !shuffled.some((name, i) => name === names[i]);
  }

  return names.map((giver, i) => ({
    giver,
    receiver: shuffled[i],
    wishlist: participants.find(p => p.name === shuffled[i])?.wishlist || []
  }));
}
